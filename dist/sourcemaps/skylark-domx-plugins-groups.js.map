{"version":3,"sources":["skylark-domx-plugins-groups.js"],"names":["define","plugins","groups","langx","$","elmx","Group","Plugin","inherit","klassName","pluginName","options","classes","selectors","item","template","selector","selectable","multiSelect","base","selected","active","_construct","elm","this","overrided","self","velm","_velm","_elm","itemSelector","on","veItem","hasClass","value","getItemValue","setActiveItem","toggleSelectOneItem","clearSelectedItems","selectOneItem","resetItems","_$items","findItem","valueOrIdx","isNumber","eq","isString","filter","getItems","$item","data","undefined","index","getItemsCount","size","getItemIndex","isSelectedItem","addClass","unselectOneItem","removeClass","selectedClass","getSelectedItemValues","map","el","getSelectedItems","getActiveItem","activeClass","$activeItem","current","next","getSelectedItem","selectedItems","renderItemHtml","itemData","_renderItemHtml","itemTpl","isFunction","register","Collapse","Linear","items","addItems","noder","datax","finder","geom","eventer","styler","dnd","manager","off","attr","removeAttr","pagePosition","height","Draggable","draggingClass","forEach","eventName","mousedown","e","handle","dragHandle","closest","target","source","dragSource","prepare","mouseup","dragstart","start","dragend","stop","dragging","end","Droppable","hoverClass","acceptable","dragover","stopPropagation","e2","create","overElm","transfer","draggingTransfer","trigger","preventDefault","dataTransfer","dropEffect","dragenter","dragleave","drop","Array","prototype","some","enable","disable","destory","placeholders","Sortable","connectWith","placeholder","placeholderClass","container","$container","$items","children","createElement","test","tagName","class","preparing","started","ghost","text","ended","show","detach","parent","overing","is","forcePlaceholderSize","outerHeight","hide","not","length","append","dropped","after","add","Tiler","alignment","infiniteScroll","itemRendered","noItemsHTML","viewClass","renderItem","_renderItem","i","itemHtml","main"],"mappings":"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","file":"../skylark-domx-plugins-groups.js","sourcesContent":["define('skylark-domx-plugins-groups/groups',[\r\n    \"skylark-domx-plugins-base/plugins\"\r\n], function(plugins) {\r\n    'use strict';\r\n\r\n\treturn plugins.groups = {};\r\n});\r\n\n define('skylark-domx-plugins-groups/group',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./groups\"\r\n],function(langx,$,elmx,plugins,groups){\r\n  'use strict'\r\n\r\n    /*\r\n     * The base plugin class for grouping items.\r\n     */\r\n    var Group = plugins.Plugin.inherit({\r\n        klassName : \"Group\",\r\n\r\n        pluginName : \"lark.groups.group\",\r\n\r\n        options : {\r\n        \tclasses : {\r\n        \t},\r\n\r\n        \tselectors : {\r\n            //container : \"ul\", // \r\n        \t},\r\n\r\n          item : {\r\n            template : \"<span><i class=\\\"glyphicon\\\"></i><a href=\\\"javascript: void(0);\\\"></a> </span>\",\r\n            selector : \"li\",      // \".list-group-item\"\r\n\r\n            selectable: false,\r\n            multiSelect: false,\r\n\r\n            classes : {\r\n              base : \"item\",\r\n              selected : \"selected\",\r\n              active : \"active\"\r\n            }\r\n          },\r\n\r\n          //active : 0,\r\n\r\n          //A collection or function that is used to generate the content of the group \r\n          /*\r\n           * example1\r\n           *itemsSource : [{  \r\n           *  type: 'image',href : \"https://xxx.com/1.jpg\",title : \"1\"\r\n           *},{\r\n           *  type: 'image',href : \"https://xxx.com/1.jpg\",title : \"1\"\r\n           * }],\r\n           */\r\n          /*\r\n           * example2\r\n           *itemsSource :  function(){},\r\n           */\r\n        },\r\n\r\n        selected : null,\r\n \r\n        _construct : function(elm,options) {\r\n            this.overrided(elm,options);\r\n            var self = this,\r\n                velm = this._velm = elmx(this._elm),\r\n                itemSelector = this.options.item.selector;\r\n\r\n            velm.on('click', itemSelector, function () {\r\n                var veItem = elmx(this);\r\n                if (!veItem.hasClass('disabled')) {\r\n                    let value = self.getItemValue(this);\r\n                    self.setActiveItem(value);\r\n\r\n                  if (self.options.item.selectable) {\r\n\r\n                      if (self.options.item.multiSelect) {\r\n                        self.toggleSelectOneItem(value);\r\n                      } else {\r\n                        self.clearSelectedItems();\r\n                        self.selectOneItem(value);\r\n                      }\r\n                  }\r\n\r\n                }\r\n\r\n\r\n                //veItem.blur();\r\n                return false;\r\n            });\r\n\r\n            this.resetItems();\r\n\r\n            ///if (this.options.item.multiSelect) {\r\n            ///  this.selected = [];\r\n            ///} else {\r\n            ///  this.selected = null;\r\n            ///}\r\n            ///this.selected = this.options.selected;\r\n        },\r\n\r\n        resetItems : function() {\r\n            this._$items = this._velm.$(this.options.item.selector);\r\n        },\r\n\r\n        findItem : function (valueOrIdx) {\r\n          var $item;\r\n          if (langx.isNumber(valueOrIdx)) {\r\n            $item = this._$items.eq(valueOrIdx);\r\n          } else if (langx.isString(valueOrIdx)) {\r\n            $item = this._$items.filter('[data-value=\"' + valueOrIdx + '\"]');\r\n          } else {\r\n            $item = $(valueOrIdx);\r\n          }\r\n          return $item[0];\r\n        },\r\n\r\n        getItems : function() {\r\n          return this._$items;\r\n        },\r\n\r\n        getItemValue : function(item) {\r\n          let $item = $(item),\r\n              value = $item.data(\"value\");\r\n          if (value === undefined) {\r\n            value = this._$items.index($item[0]);\r\n          }\r\n          return value;\r\n        },\r\n\r\n        getItemsCount : function() {\r\n            return this._$items.size();\r\n        },\r\n\r\n        getItemIndex : function(item) {\r\n            return this._$items.index(item);\r\n        },\r\n\r\n        \r\n        isSelectedItem : function(valueOrIdx) {\r\n          return $(this.findItem(valueOrIdx)).hasClass(this.options.item.classes.selected);\r\n        },\r\n                 \r\n        selectOneItem : function (valueOrIdx) {\r\n          $(this.findItem(valueOrIdx)).addClass(this.options.item.classes.selected);\r\n        },\r\n\r\n        unselectOneItem : function (valueOrIdx) {\r\n          $(this.findItem(valueOrIdx)).removeClass(this.options.item.classes.selected);\r\n        },\r\n\r\n        /*\r\n         * clears the selected items.\r\n         */\r\n        clearSelectedItems : function() {\r\n          let selectedClass = this.options.item.classes.selected;\r\n          this._$items.filter(`.${selectedClass}`).removeClass(selectedClass);\r\n        },\r\n\r\n        getSelectedItemValues : function() {\r\n          let selectedClass = this.options.item.classes.selected;\r\n          return  this._$items.filter(`.${selectedClass}`).map( (el) => {\r\n            return this.getItemValue(el);\r\n          });\r\n        },\r\n\r\n        getSelectedItems : function() {\r\n          let selectedClass = this.options.item.classes.selected;\r\n          return  this._$items.filter(`.${selectedClass}`);\r\n        },\r\n\r\n        getActiveItem : function() {\r\n          let activeClass = this.options.item.classes.active,\r\n              $activeItem = this._$items.filter(`.${activeClass}`);\r\n          return $activeItem[0] || null;\r\n        },\r\n\r\n        setActiveItem : function(valueOrIdx) {\r\n          let current = this.getActiveItem(),\r\n              next = this.findItem(valueOrIdx);\r\n          if (next != current) {\r\n            let activeClass = this.options.item.classes.active;\r\n            $(current).removeClass(activeClass);\r\n            $(next).addClass(activeClass);\r\n          }\r\n        },\r\n\r\n\r\n        getSelectedItem : function() {\r\n          let selectedItems = this.getSelectedItems();\r\n          return selectedItems[0] || null;\r\n        },\r\n\r\n        toggleSelectOneItem : function(valueOrIdx) {\r\n          if (this.isSelectedItem(valueOrIdx)) {\r\n            this.unselectOneItem(valueOrIdx);\r\n          } else {\r\n            this.selectOneItem(valueOrIdx);\r\n          }\r\n        },\r\n\r\n        renderItemHtml : function(itemData) {\r\n          if (!this._renderItemHtml) {\r\n            let itemTpl = this.options.item.template;\r\n            if (langx.isString(itemTpl)) {\r\n              this._renderItemHtml = langx.template(itemTpl);\r\n            } else if (langx.isFunction(itemTpl)) {\r\n              this._renderItemHtml = itemTpl;\r\n            }\r\n          }\r\n\r\n          return this._renderItemHtml(itemData);\r\n        }\r\n\r\n  });\r\n\r\n\r\n  plugins.register(Group);\r\n\r\n  return groups.Group = Group;\r\n\r\n});\r\n\r\n\r\n\r\n\n define('skylark-domx-plugins-groups/linear',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"skylark-domx-plugins-toggles/collapse\",\r\n  \"./groups\",\r\n  \"./group\"\r\n],function(langx,$,elmx,plugins,Collapse,groups,Group){\r\n  'use strict'\r\n\r\n  var Linear = Group.inherit({\r\n    klassName : \"Linear\",\r\n\r\n    pluginName : \"lark.groups.linear\",\r\n\r\n    options: {\r\n        item : {\r\n          selectable: true\r\n        },\r\n        data : {}\r\n    },\r\n\r\n    _construct: function (elm, options) {\r\n      this.overrided(elm, options);\r\n\r\n      if (this.options.data.items) {\r\n          this.addItems(this.options.data.items);\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  plugins.register(Linear);\r\n\r\n  return groups.Linear = Linear;\r\n\r\n});\r\n\r\n\r\n\r\n\ndefine('skylark-domx-plugins-dnd/draggable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n\r\n    var Draggable = plugins.Plugin.inherit({\r\n        klassName: \"Draggable\",\r\n        \r\n        pluginName : \"lark.dnd.draggable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = this.options;\r\n\r\n            self.draggingClass = options.draggingClass;\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var options = self.options;\r\n                    if (options.handle) {\r\n                        self.dragHandle = finder.closest(e.target, options.handle);\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (options.source) {\r\n                        self.dragSource = finder.closest(e.target, options.source);\r\n                    } else {\r\n                        self.dragSource = self._elm;\r\n                    }\r\n                    manager.prepare(self);\r\n                    if (self.dragSource) {\r\n                        datax.attr(self.dragSource, \"draggable\", 'true');\r\n                    }\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    if (self.dragSource) {\r\n                        //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                        self.dragSource = null;\r\n                        self.dragHandle = null;\r\n                    }\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n    plugins.register(Draggable,\"draggable\");\r\n\r\n    return dnd.Draggable = Draggable;\r\n});\ndefine('skylark-domx-plugins-dnd/droppable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var Droppable = plugins.Plugin.inherit({\r\n        klassName: \"Droppable\",\r\n\r\n        pluginName : \"lark.dnd.droppable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = self.options,\r\n                draggingClass = options.draggingClass,\r\n                hoverClass,\r\n                activeClass,\r\n                acceptable = true;\r\n\r\n            [\"started\", \"entered\", \"leaved\", \"dropped\", \"overing\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n            eventer.on(elm, {\r\n                \"dragover\": function(e) {\r\n                    e.stopPropagation()\r\n\r\n                    if (!acceptable) {\r\n                        return\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"overing\", {\r\n                        overElm: e.target,\r\n                        transfer: manager.draggingTransfer,\r\n                        acceptable: true\r\n                    });\r\n                    self.trigger(e2);\r\n\r\n                    if (e2.acceptable) {\r\n                        e.preventDefault() // allow drop\r\n\r\n                        e.dataTransfer.dropEffect = \"copyMove\";\r\n                    }\r\n\r\n                },\r\n\r\n                \"dragenter\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    var e2 = eventer.create(\"entered\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n                },\r\n\r\n                \"dragleave\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n                    if (!acceptable) return false\r\n\r\n                    var e2 = eventer.create(\"leaved\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.removeClass(elm, hoverClass);\r\n                    }\r\n                },\r\n\r\n                \"drop\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    eventer.stop(e); // stops the browser from redirecting.\r\n\r\n                    if (!manager.dragging) return\r\n\r\n                    // manager.dragging.elm.removeClass('dragging');\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"dropped\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    manager.end(true)\r\n                }\r\n            });\r\n\r\n            manager.on(\"dndStarted\", function(e) {\r\n                var e2 = eventer.create(\"started\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                acceptable = e2.acceptable;\r\n                hoverClass = e2.hoverClass;\r\n                activeClass = e2.activeClass;\r\n\r\n                if (activeClass && acceptable) {\r\n                    styler.addClass(elm, activeClass);\r\n                }\r\n\r\n            }).on(\"dndEnded\", function(e) {\r\n                var e2 = eventer.create(\"ended\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                if (hoverClass && acceptable) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n                if (activeClass && acceptable) {\r\n                    styler.removeClass(elm, activeClass);\r\n                }\r\n\r\n                acceptable = false;\r\n                activeClass = null;\r\n                hoverClass = null;\r\n            });\r\n\r\n        }\r\n    });\r\n\r\n    plugins.register(Droppable,\"droppable\");\r\n\r\n    return dnd.Droppable = Droppable;\r\n});\ndefine('skylark-domx-plugins-groups/sortable',[\r\n    \"./groups\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"skylark-domx-plugins-dnd/draggable\",\r\n    \"skylark-domx-plugins-dnd/droppable\"\r\n],function(groups, langx,noder,datax,geom,eventer,styler,$,plugins,Draggable,Droppable){\r\n   'use strict'\r\n\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n    var Sorter = plugins.Plugin.inherit({\r\n        \"klassName\" : \"Sorter\",\r\n\r\n        enable : function() {\r\n\r\n        },\r\n        \r\n        disable : function() {\r\n\r\n        },\r\n\r\n        destory : function() {\r\n\r\n        }\r\n    });\r\n\r\n\r\n    var dragging, placeholders = $();\r\n\r\n\r\n    var Sortable = plugins.Plugin.inherit({\r\n        klassName: \"Sortable\",\r\n\r\n        pluginName : \"lark.groups.sortable\",\r\n        \r\n        options : {\r\n            connectWith: false,\r\n            placeholder: null,\r\n            placeholderClass: 'sortable-placeholder',\r\n            draggingClass: 'sortable-dragging',\r\n            items : null\r\n        },\r\n\r\n        /*\r\n         * @param {HTMLElement} container  the element to use as a sortable container\r\n         * @param {Object} options  options object\r\n         * @param {String} [options.items = \"\"] \r\n         * @param {Object} [options.connectWith =] the selector to create connected groups\r\n         * @param {Object} [options\r\n         * @param {Object} [options\r\n         */\r\n        _construct : function (container,options) {\r\n            this.overrided(container,options);\r\n\r\n            options = this.options;\r\n\r\n            var isHandle, index, \r\n                $container = $(container), \r\n                $items = $container.children(options.items);\r\n            var placeholder = $(options.placeholder || noder.createElement(/^(ul|ol)$/i.test(container.tagName) ? 'li' : 'div',{\r\n                \"class\" : options.placeholderClass\r\n            }));\r\n\r\n            Draggable(container,{\r\n                source : options.items,\r\n                handle : options.handle,\r\n                draggingClass : options.draggingClass,\r\n                preparing : function(e) {\r\n                    //e.dragSource = e.handleElm;\r\n                },\r\n                started :function(e) {\r\n                    e.ghost = e.dragSource;\r\n                    e.transfer = {\r\n                        \"text\": \"dummy\"\r\n                    };\r\n                    index = (dragging = $(e.dragSource)).index();\r\n                },\r\n                ended : function(e) {\r\n                    if (!dragging) {\r\n                        return;\r\n                    }\r\n                    dragging.show();\r\n                    placeholders.detach();\r\n                    if (index != dragging.index()) {\r\n                        dragging.parent().trigger('sortupdate', {item: dragging});\r\n                    }\r\n                    dragging = null;                \r\n                }\r\n\r\n            });\r\n\r\n            \r\n            Droppable(container,{\r\n                started: function(e) {\r\n                    e.acceptable = true;\r\n                    e.activeClass = \"active\";\r\n                    e.hoverClass = \"over\";\r\n                },\r\n                overing : function(e) {\r\n                    if ($items.is(e.overElm)) {\r\n                        if (options.forcePlaceholderSize) {\r\n                            placeholder.height(dragging.outerHeight());\r\n                        }\r\n                        dragging.hide();\r\n                        $(e.overElm)[placeholder.index() < $(e.overElm).index() ? 'after' : 'before'](placeholder);\r\n                        placeholders.not(placeholder).detach();\r\n                    } else if (!placeholders.is(e.overElm) && !$(e.overElm).children(options.items).length) {\r\n                        placeholders.detach();\r\n                        $(e.overElm).append(placeholder);\r\n                    }                \r\n                },\r\n                dropped : function(e) {\r\n                    placeholders.filter(':visible').after(dragging);\r\n                    dragging.show();\r\n                    placeholders.detach();\r\n\r\n                    dragging = null;                \r\n                  }\r\n            });\r\n\r\n            $container.data('items', options.items)\r\n            placeholders = placeholders.add(placeholder);\r\n            if (options.connectWith) {\r\n                $(options.connectWith).add(this).data('connectWith', options.connectWith);\r\n            }\r\n            \r\n        }\r\n    });\r\n\r\n    plugins.register(Sortable,\"sortable\");\r\n\r\n    return groups.Sortable = Sortable;\r\n});\r\n\n define('skylark-domx-plugins-groups/tiler',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./groups\",\r\n  \"./group\"\r\n],function(langx,$,elmx,plugins,groups,Group){\r\n  'use strict'\r\n\r\n  var Tiler = Group.inherit({\r\n    klassName : \"Tiler\",\r\n\r\n    pluginName : \"lark.groups.tiler\",\r\n\r\n    options: {\r\n        alignment: 'left',\r\n        infiniteScroll: false,\r\n        itemRendered: null,\r\n        noItemsHTML: 'no items found',\r\n        selectable: false,\r\n        viewClass: \"repeater-tile\",\r\n        template : '<div class=\"clearfix repeater-tile\" data-container=\"true\" data-infinite=\"true\" data-preserve=\"shallow\"></div>',\r\n        item : {\r\n            template: '<div class=\"thumbnail\"><img height=\"75\" src=\"<%= href %>\" width=\"65\"><span><%= title %></span></div>',\r\n            selectable : true\r\n        },\r\n        renderItem : null\r\n    },\r\n\r\n    _construct: function (elm, options) {\r\n      this.overrided(elm, options);\r\n\r\n      this._renderItem = langx.template(this.options.item.template);\r\n\r\n      for (var i=0;i<options.items.length;i++) {\r\n        var itemHtml = this._renderItem(options.items[i]);\r\n        this._velm.append($(itemHtml));\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n\r\n  plugins.register(Tiler);\r\n\r\n  return groups.Tiler = Tiler;\t\r\n});\ndefine('skylark-domx-plugins-groups/main',[\r\n    \"./groups\",\r\n    \"./group\",\r\n    \"./linear\",\r\n    \"./sortable\",\r\n    \"./tiler\"\r\n], function(groups) {\r\n    return groups;\r\n});\ndefine('skylark-domx-plugins-groups', ['skylark-domx-plugins-groups/main'], function (main) { return main; });\n\n"]}